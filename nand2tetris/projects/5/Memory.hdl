// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/Memory.hdl
/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load=1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the Screen
 * and Keyboard chip specifications given in the lectures and the book.
 */
CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
    
    Not(in = address[13], out = notAddr13);
    Not(in = address[14], out = notAddr14);
    
    // addrRAM -- if address bit 14 and 13 are 0, the address
    // points at the RAM chip. 
    // If and only if the RAM chip is addressed and load = 1, then load the RAM. 
    And(a = load, b = notAddr14, out = addrRAM);
    And(a = load, b = addrRAM, out = loadRAM);
    
    // addrScreen - if address bit 14 is 1 and 13 is 0, the address
    // points at the screen chip.
    // Iff the screen chip is addressed and load = 1 then load screen.
    And(a = address[14], b = notAddr13, out = addrScreen);
    And(a = load, b = addrScreen, out = loadScreen);
    
    // If address bit 14 and 13 are 1, keyboard is addressed.
    // If other bits are also 1, input is invalid. 
    And(a = address[14], b = address[13], out = and1413);
    
    Or8Way(in = address[0..7], out = addr07);
    Or8Way(in[0..4] = address[8..12], in[5..7] = false, out = addr812);
    Or(a = addr07, b = addr812, out = OrAddrLsb);
    Not(in = OrAddrLsb, out = NotOrAddrLsb);
    
    
    RAM16K(
        in = in,
        load = loadRAM,
        address = address[0..13],
        out = outRAM
        );

    Screen(
        in = in,
        load = loadScreen,
        address = address[0..12],
        out = outScreen);
        
    Keyboard(
        out = outKBD);
        
    Mux4Way16(
        a = outRAM,     // sel = 00 
        b = outRAM,     // sel = 01
        c = outScreen,  // sel = 10
        d = outKBD,     // sel = 11
        sel = address[13..14],
        out = out);
}