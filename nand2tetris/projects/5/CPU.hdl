// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
	
    
    // Instruction Mux
    Mux16(
        a = instruction,
        b = ALUout,
        sel = instruction[15],
        out = MuxInstructionOut
    );
    
    And(a = instruction[15],
        b = instruction[5],
        out = loadAtmp);
    Not(in = instruction[15],
        out = notIns15);
    Or(a = loadAtmp,
        b = notIns15,
        out = loadA);
    
//    And(a = instruction[15],
//        b = instruction[5],
//        out = loadA);
    // A register
    ARegister(
        in = MuxInstructionOut,
        load = loadA,
        out = Aout, // ALU Mux and PC
        out[0..14] = addressM        
    );
    
    // ALU Mux
    Mux16(
        a = Aout,
        b = inM,
        sel = instruction[12],
        out = MuxAMout
    );    
    
    // DRegister load
    And(a = instruction[15],
        b = instruction[4],
        out = loadDtmp);
    Or(a = loadDtmp,
        b = notIns15,
        out = loadD);
    
    
    // D register
    DRegister(
        in = ALUout,
        load = loadDtmp,
        out = Dout    
    );
    
    // ALU
    ALU(
        x = Dout,
        y = MuxAMout,
        zx = instruction[11],
        nx = instruction[10],
        zy = instruction[9],
        ny = instruction[8],
        f = instruction[7],
        no = instruction[6],
        
        out = outM,
        out = ALUout,
        zr = zr,
        ng = ng
    );
    
    
    
    
    
    // Program Counter
    
    // Unnecessary?
    Not(in = j, out = notj);
    Not(in = reset, out = notreset);
    And(a = notj, b = notreset, out = inc);
    // End unnecessary?
    
    PC(
        in = Aout,
        inc = inc,
        load = j,
        reset = reset,
        out[0..14] = pc
    );
    
    //---------------
    // Logic handling
    
    // j logic
    // PC inc
    
    // 100 JLT
    And(a = instruction[2],
        b = ng,
        out = JLT);
    // 010 JEQ
    And(a = instruction[1],
        b = zr,
        out = JEQ);
    // 001 JGT
    Or(a = ng, b = zr, out = ngZr);
    Not(in = ngZr, out = NotNgZr);
    And(a = instruction[0],
        b = NotNgZr,
        out = JGT);
    
    Or(a = JLT,
        b = JEQ,
        out = JLE);
    Or(a = JGT,
        b = JLE,
        out = jout);
    And(a = jout, 
        b = instruction[15],
        out = j);
        

    And(a = instruction[3], b = instruction[15], out = writeM);

}